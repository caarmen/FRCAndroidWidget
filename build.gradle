import org.apache.tools.ant.filters.ReplaceTokens

import java.text.SimpleDateFormat

// Top-level build file where you can add configuration options common to all sub-projects/modules.

ext.globalProjectName = 'french-revolutionary-calendar-widget'


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
    }
}

apply plugin: 'com.github.ben-manes.versions'

allprojects {
    repositories {
        mavenLocal()
        jcenter()
    }
    // Only show real releases with the ben-manes plugin.
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
    configurations.all {
        resolutionStrategy {
            force "com.android.support:support-v4:${supportLibVersion}"
        }
    }
}


def gitSha1() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def buildDate() {
    def dateFormat = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm\'Z\'')
    dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
    return dateFormat.format(new Date())
}

def filterResources(project, buildVariant) {
    // We can't use the project.properties object directly in the filter, because
    // it's a HashMap, and we need a Properties object.
    // We can't just do gradleProperties.putAll(project.properties) because this
    // crashes if a property exists with a "null" value.
    Properties gradleProperties = new Properties();
    Set keys = project.properties.keySet();
    for(Object key : keys) {
        Object value = project.properties.get(key);
        if(value != null)
            gradleProperties.put(key, value);
    }
    // Copy and 'filter' (replace {} placeholders) the resources
    for(output in buildVariant.outputs) {
        def path = output.processResources.resDir.getPath()
        copy {
            from path + '/values/values.xml'
            filter(ReplaceTokens, tokens: gradleProperties, beginToken: '{', endToken: '}')
            into path + '/values'
            rename 'values.xml', 'values.xml.expanded'
        }
        // Override the file
        copy {
            from path + '/values/values.xml.expanded'
            into path + '/values'
            rename 'values.xml.expanded', 'values.xml'
        }
        // Delete the temporary file
        new File(path + '/values/values.xml.expanded').delete()
    }
}

// Only show real releases with the ben-manes plugin.
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'alpha-preview', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
ext.supportLibVersion = "25.3.1"
